'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateImgTags = exports.getDims = undefined;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _imageSize = require('image-size');

var _imageSize2 = _interopRequireDefault(_imageSize);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getDims = exports.getDims = function getDims(imageUrls, callback) {
  var totalLinks = imageUrls.length;
  if (totalLinks === 0) {
    setTimeout(function () {
      return callback([]);
    }, 0);
  } else {
    imageUrls.forEach(function (imageUrl, index) {
      var options = _url2.default.parse(imageUrl);
      var proto = options.protocol === 'https:' ? _https2.default : _http2.default;
      var request = proto.request(options, function (response) {
        return getBody(response, function (body) {
          var dims = void 0;
          try {
            dims = (0, _imageSize2.default)(body);
          } catch (e) {
            dims = {
              width: 0,
              height: 0
            };
            console.warn('failed to find size of image', imageUrl);
          }
          next(dims, index);
        });
      });
      request.on('error', function (e) {
        console.error('problem with request: ' + e.message);
        next({
          width: 0,
          height: 0
        }, index);
      });
      request.end();
    });
  }
  var next = asyncCaller(totalLinks, callback);
};

var asyncCaller = function asyncCaller(length, callback) {
  var results = [];
  var counter = 0;
  return function (result, i) {
    counter += 1;
    results[i] = result;
    if (counter === length) {
      callback(results);
    }
  };
};

var imageTagRegex = /(<img)/;
var updateImgTags = exports.updateImgTags = function updateImgTags(html, dimensions) {
  return imageTagRegex.test(html) ? updateImgTags(html.replace(imageTagRegex, '<amp-img\n      width="' + dimensions[0].width + '"\n      height="' + dimensions[0].height + '"\n      layout="responsive"'), dimensions.slice(1)) : html;
};

var getBody = function getBody(response, callback) {
  var chunks = [];
  response.on('data', function (chunk) {
    chunks.push(chunk);
    // how do we chunk with nock?
    // sending a big image seems like a waste of time..
    /* istanbul ignore if */
    if (chunks.length === 2) {
      callback(Buffer.concat(chunks));
    }
  });
  response.on('end', function () {
    /* istanbul ignore else */
    if (chunks.length < 2) {
      callback(Buffer.concat(chunks));
    }
  });
};