'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.markdown2AmpHTML = exports.parse = undefined;

var _remarkable = require('remarkable');

var _remarkable2 = _interopRequireDefault(_remarkable);

var _htmlparser = require('htmlparser2');

var _htmlparser2 = _interopRequireDefault(_htmlparser);

var _imageDims = require('./imageDims.js');

var _templates = require('./templates.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var remarkable = new _remarkable2.default('full');

var parse = exports.parse = function parse(markdown, opts, callback) {
  markdown2AmpHTML({ markdown: markdown }, function (HTML) {
    return callback((0, _templates.createAmpPage)(HTML, opts));
  });
};

var markdown2AmpHTML = exports.markdown2AmpHTML = function markdown2AmpHTML(opts, callback) {
  var markdown = opts.markdown;

  var htmlRaw = remarkable.render(markdown);
  parseHtml(htmlRaw, function (html, _ref) {
    var imageUrls = _ref.imageUrls;
    return (0, _imageDims.getDims)(imageUrls, function (dimensions) {
      return callback((0, _imageDims.updateImgTags)(html, dimensions));
    });
  });
};

var attribStr = function attribStr(attribs) {
  return Object.keys(attribs).map(function (attribKey) {
    return ' ' + attribKey + '="' + attribs[attribKey] + '"';
  }).join('');
};

var createParseRules = function createParseRules() {
  return [function (urls) {
    return {
      label: "imageUrls",
      target: "img",
      onOpenTag: function onOpenTag(attribs) {
        return urls.push(attribs.src);
      },
      getResults: function getResults() {
        return urls;
      }
    };
  }([])];
};

var parseHtml = function parseHtml(html, callback) {
  var parseRules = createParseRules();
  var tagStack = [{ text: "<!doctype html>" }];
  var parser = new _htmlparser2.default.Parser({
    onopentag: function onopentag(name, attribs) {
      tagStack.push({ name: name, attribs: attribs,
        text: ""
      });
      parseRules.forEach(function (rule) {
        if (rule.onOpenTag && !(rule.target && rule.target !== name)) {
          rule.onOpenTag(attribs);
        }
      });
    },
    ontext: function ontext(text) {
      tagStack[tagStack.length - 1].text += text;
    },
    onclosetag: function onclosetag(name) {
      var tag = tagStack.pop();
      tagStack[tagStack.length - 1].text += '<' + tag.name + ' ' + attribStr(tag.attribs) + '>' + tag.text + '</' + tag.name + '>';
    },
    onend: function onend() {
      var ruleOutput = parseRules.reduce(function (data, rule) {
        if (typeof rule.getResults === 'function') {
          data[rule.label] = rule.getResults();
        }
        return data;
      }, {});
      callback(tagStack[0].text, ruleOutput);
    }
  });
  parser.write(html);
  parser.end();
};

exports.default = parse;